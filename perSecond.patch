# Some versions of Graphite lack the "perSecond" render function, which is really important 
# for network graphs like this.  This patch to:
#     graphite/webapp/graphite/render/functions.py
# adds the function so you can get B/s graphs instead of B/min (actually B/INTERVAL) graphs.
#
# You can add this manually, but only use it as an actual "patch" if your functions.py has
# has the following md5sum:
#     da9f4e862bfc8d58c432d8c89f1b4948  functions.py
#
2654,2700d2653
< 
< ## Patched to add perSecond function
< def perSecond(requestContext, seriesList, maxValue=None):
<   """
<   Derivative adjusted for the series time interval
<   This is useful for taking a running total metric and showing how many requests
<   per second were handled.
< 
<   Example:
< 
<   .. code-block:: none
< 
<     &target=perSecond(company.server.application01.ifconfig.TXPackets)
< 
<   Each time you run ifconfig, the RX and TXPackets are higher (assuming there
<   is network traffic.) By applying the derivative function, you can get an
<   idea of the packets per minute sent or received, even though you're only
<   recording the total.
<   """
<   results = []
<   for series in seriesList:
<     newValues = []
<     prev = None
<     for val in series:
<       step = series.step
<       if None in (prev,val):
<         newValues.append(None)
<         prev = val
<         continue
< 
<       diff = val - prev
<       if diff >= 0:
<         newValues.append(diff / step)
<       elif maxValue is not None and maxValue >= val:
<         newValues.append( ((maxValue - prev) + val  + 1) / step )
<       else:
<         newValues.append(None)
< 
<       prev = val
<     newName = "perSecond(%s)" % series.name
<     newSeries = TimeSeries(newName, series.start, series.end, series.step, newValues)
<     newSeries.pathExpression = newName
<     results.append(newSeries)
<   return results
< ## end patch
< 
< 
2823,2826d2775
< 
<   ## Patched to add perSecond function
<   "perSecond": perSecond,
<   ## end patch
